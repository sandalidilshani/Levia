"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cli-highlight";
exports.ids = ["vendor-chunks/cli-highlight"];
exports.modules = {

/***/ "(ssr)/./node_modules/cli-highlight/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/cli-highlight/dist/index.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.supportsLanguage = exports.listLanguages = exports.highlight = void 0;\nvar hljs = __importStar(__webpack_require__(/*! highlight.js */ \"(ssr)/./node_modules/highlight.js/lib/index.js\"));\nvar parse5 = __importStar(__webpack_require__(/*! parse5 */ \"(ssr)/./node_modules/parse5/lib/index.js\"));\nvar parse5_htmlparser2_tree_adapter_1 = __importDefault(__webpack_require__(/*! parse5-htmlparser2-tree-adapter */ \"(ssr)/./node_modules/parse5-htmlparser2-tree-adapter/lib/index.js\"));\nvar theme_1 = __webpack_require__(/*! ./theme */ \"(ssr)/./node_modules/cli-highlight/dist/theme.js\");\nfunction colorizeNode(node, theme, context) {\n    if (theme === void 0) { theme = {}; }\n    switch (node.type) {\n        case 'text': {\n            var text = node.data;\n            if (context === undefined) {\n                return (theme.default || theme_1.DEFAULT_THEME.default || theme_1.plain)(text);\n            }\n            return text;\n        }\n        case 'tag': {\n            var hljsClass = /hljs-(\\w+)/.exec(node.attribs.class);\n            if (hljsClass) {\n                var token_1 = hljsClass[1];\n                var nodeData = node.childNodes\n                    .map(function (node) { return colorizeNode(node, theme, token_1); })\n                    .join('');\n                return (theme[token_1] || theme_1.DEFAULT_THEME[token_1] || theme_1.plain)(nodeData);\n            }\n            // Return the data itself when the class name isn't prefixed with a highlight.js token prefix.\n            // This is common in instances of sublanguages (JSX, Markdown Code Blocks, etc.)\n            return node.childNodes.map(function (node) { return colorizeNode(node, theme); }).join('');\n        }\n    }\n    throw new Error('Invalid node type ' + node.type);\n}\nfunction colorize(code, theme) {\n    if (theme === void 0) { theme = {}; }\n    var fragment = parse5.parseFragment(code, {\n        treeAdapter: parse5_htmlparser2_tree_adapter_1.default,\n    });\n    return fragment.childNodes.map(function (node) { return colorizeNode(node, theme); }).join('');\n}\n/**\n * Apply syntax highlighting to `code` with ASCII color codes. The language is automatically\n * detected if not set.\n *\n * ```ts\n * import {highlight} from 'cli-highlight';\n * import * as fs from 'fs';\n *\n * fs.readFile('package.json', 'utf8', (err: any, json: string) => {\n *     console.log('package.json:');\n *     console.log(highlight(json));\n * });\n * ```\n *\n * @param code The code to highlight\n * @param options Optional options\n */\nfunction highlight(code, options) {\n    if (options === void 0) { options = {}; }\n    var html;\n    if (options.language) {\n        html = hljs.highlight(code, { language: options.language, ignoreIllegals: options.ignoreIllegals }).value;\n    }\n    else {\n        html = hljs.highlightAuto(code, options.languageSubset).value;\n    }\n    return colorize(html, options.theme);\n}\nexports.highlight = highlight;\n/**\n * Returns all supported languages\n */\nfunction listLanguages() {\n    return hljs.listLanguages();\n}\nexports.listLanguages = listLanguages;\n/**\n * Returns true if the language is supported\n * @param name A language name, alias or file extension\n */\nfunction supportsLanguage(name) {\n    return !!hljs.getLanguage(name);\n}\nexports.supportsLanguage = supportsLanguage;\nexports[\"default\"] = highlight;\n__exportStar(__webpack_require__(/*! ./theme */ \"(ssr)/./node_modules/cli-highlight/dist/theme.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2xpLWhpZ2hsaWdodC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLG1DQUFtQyxvQ0FBb0MsZ0JBQWdCO0FBQ3ZGLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0IsR0FBRyxxQkFBcUIsR0FBRyxpQkFBaUI7QUFDcEUsd0JBQXdCLG1CQUFPLENBQUMsb0VBQWM7QUFDOUMsMEJBQTBCLG1CQUFPLENBQUMsd0RBQVE7QUFDMUMsd0RBQXdELG1CQUFPLENBQUMsMEdBQWlDO0FBQ2pHLGNBQWMsbUJBQU8sQ0FBQyxpRUFBUztBQUMvQjtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyw0Q0FBNEM7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxtQ0FBbUM7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0EsS0FBSztBQUNMLHFEQUFxRCxtQ0FBbUM7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxXQUFXO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQSxzQ0FBc0Msb0VBQW9FO0FBQzFHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIsa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsaUVBQVM7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZWF2aWEvLi9ub2RlX21vZHVsZXMvY2xpLWhpZ2hsaWdodC9kaXN0L2luZGV4LmpzP2Y4MDgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN1cHBvcnRzTGFuZ3VhZ2UgPSBleHBvcnRzLmxpc3RMYW5ndWFnZXMgPSBleHBvcnRzLmhpZ2hsaWdodCA9IHZvaWQgMDtcbnZhciBobGpzID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJoaWdobGlnaHQuanNcIikpO1xudmFyIHBhcnNlNSA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwicGFyc2U1XCIpKTtcbnZhciBwYXJzZTVfaHRtbHBhcnNlcjJfdHJlZV9hZGFwdGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInBhcnNlNS1odG1scGFyc2VyMi10cmVlLWFkYXB0ZXJcIikpO1xudmFyIHRoZW1lXzEgPSByZXF1aXJlKFwiLi90aGVtZVwiKTtcbmZ1bmN0aW9uIGNvbG9yaXplTm9kZShub2RlLCB0aGVtZSwgY29udGV4dCkge1xuICAgIGlmICh0aGVtZSA9PT0gdm9pZCAwKSB7IHRoZW1lID0ge307IH1cbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICBjYXNlICd0ZXh0Jzoge1xuICAgICAgICAgICAgdmFyIHRleHQgPSBub2RlLmRhdGE7XG4gICAgICAgICAgICBpZiAoY29udGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGVtZS5kZWZhdWx0IHx8IHRoZW1lXzEuREVGQVVMVF9USEVNRS5kZWZhdWx0IHx8IHRoZW1lXzEucGxhaW4pKHRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAndGFnJzoge1xuICAgICAgICAgICAgdmFyIGhsanNDbGFzcyA9IC9obGpzLShcXHcrKS8uZXhlYyhub2RlLmF0dHJpYnMuY2xhc3MpO1xuICAgICAgICAgICAgaWYgKGhsanNDbGFzcykge1xuICAgICAgICAgICAgICAgIHZhciB0b2tlbl8xID0gaGxqc0NsYXNzWzFdO1xuICAgICAgICAgICAgICAgIHZhciBub2RlRGF0YSA9IG5vZGUuY2hpbGROb2Rlc1xuICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiBjb2xvcml6ZU5vZGUobm9kZSwgdGhlbWUsIHRva2VuXzEpOyB9KVxuICAgICAgICAgICAgICAgICAgICAuam9pbignJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGVtZVt0b2tlbl8xXSB8fCB0aGVtZV8xLkRFRkFVTFRfVEhFTUVbdG9rZW5fMV0gfHwgdGhlbWVfMS5wbGFpbikobm9kZURhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBkYXRhIGl0c2VsZiB3aGVuIHRoZSBjbGFzcyBuYW1lIGlzbid0IHByZWZpeGVkIHdpdGggYSBoaWdobGlnaHQuanMgdG9rZW4gcHJlZml4LlxuICAgICAgICAgICAgLy8gVGhpcyBpcyBjb21tb24gaW4gaW5zdGFuY2VzIG9mIHN1Ymxhbmd1YWdlcyAoSlNYLCBNYXJrZG93biBDb2RlIEJsb2NrcywgZXRjLilcbiAgICAgICAgICAgIHJldHVybiBub2RlLmNoaWxkTm9kZXMubWFwKGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiBjb2xvcml6ZU5vZGUobm9kZSwgdGhlbWUpOyB9KS5qb2luKCcnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbm9kZSB0eXBlICcgKyBub2RlLnR5cGUpO1xufVxuZnVuY3Rpb24gY29sb3JpemUoY29kZSwgdGhlbWUpIHtcbiAgICBpZiAodGhlbWUgPT09IHZvaWQgMCkgeyB0aGVtZSA9IHt9OyB9XG4gICAgdmFyIGZyYWdtZW50ID0gcGFyc2U1LnBhcnNlRnJhZ21lbnQoY29kZSwge1xuICAgICAgICB0cmVlQWRhcHRlcjogcGFyc2U1X2h0bWxwYXJzZXIyX3RyZWVfYWRhcHRlcl8xLmRlZmF1bHQsXG4gICAgfSk7XG4gICAgcmV0dXJuIGZyYWdtZW50LmNoaWxkTm9kZXMubWFwKGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiBjb2xvcml6ZU5vZGUobm9kZSwgdGhlbWUpOyB9KS5qb2luKCcnKTtcbn1cbi8qKlxuICogQXBwbHkgc3ludGF4IGhpZ2hsaWdodGluZyB0byBgY29kZWAgd2l0aCBBU0NJSSBjb2xvciBjb2Rlcy4gVGhlIGxhbmd1YWdlIGlzIGF1dG9tYXRpY2FsbHlcbiAqIGRldGVjdGVkIGlmIG5vdCBzZXQuXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7aGlnaGxpZ2h0fSBmcm9tICdjbGktaGlnaGxpZ2h0JztcbiAqIGltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbiAqXG4gKiBmcy5yZWFkRmlsZSgncGFja2FnZS5qc29uJywgJ3V0ZjgnLCAoZXJyOiBhbnksIGpzb246IHN0cmluZykgPT4ge1xuICogICAgIGNvbnNvbGUubG9nKCdwYWNrYWdlLmpzb246Jyk7XG4gKiAgICAgY29uc29sZS5sb2coaGlnaGxpZ2h0KGpzb24pKTtcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHBhcmFtIGNvZGUgVGhlIGNvZGUgdG8gaGlnaGxpZ2h0XG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25hbCBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIGhpZ2hsaWdodChjb2RlLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICB2YXIgaHRtbDtcbiAgICBpZiAob3B0aW9ucy5sYW5ndWFnZSkge1xuICAgICAgICBodG1sID0gaGxqcy5oaWdobGlnaHQoY29kZSwgeyBsYW5ndWFnZTogb3B0aW9ucy5sYW5ndWFnZSwgaWdub3JlSWxsZWdhbHM6IG9wdGlvbnMuaWdub3JlSWxsZWdhbHMgfSkudmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBodG1sID0gaGxqcy5oaWdobGlnaHRBdXRvKGNvZGUsIG9wdGlvbnMubGFuZ3VhZ2VTdWJzZXQpLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gY29sb3JpemUoaHRtbCwgb3B0aW9ucy50aGVtZSk7XG59XG5leHBvcnRzLmhpZ2hsaWdodCA9IGhpZ2hsaWdodDtcbi8qKlxuICogUmV0dXJucyBhbGwgc3VwcG9ydGVkIGxhbmd1YWdlc1xuICovXG5mdW5jdGlvbiBsaXN0TGFuZ3VhZ2VzKCkge1xuICAgIHJldHVybiBobGpzLmxpc3RMYW5ndWFnZXMoKTtcbn1cbmV4cG9ydHMubGlzdExhbmd1YWdlcyA9IGxpc3RMYW5ndWFnZXM7XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgbGFuZ3VhZ2UgaXMgc3VwcG9ydGVkXG4gKiBAcGFyYW0gbmFtZSBBIGxhbmd1YWdlIG5hbWUsIGFsaWFzIG9yIGZpbGUgZXh0ZW5zaW9uXG4gKi9cbmZ1bmN0aW9uIHN1cHBvcnRzTGFuZ3VhZ2UobmFtZSkge1xuICAgIHJldHVybiAhIWhsanMuZ2V0TGFuZ3VhZ2UobmFtZSk7XG59XG5leHBvcnRzLnN1cHBvcnRzTGFuZ3VhZ2UgPSBzdXBwb3J0c0xhbmd1YWdlO1xuZXhwb3J0cy5kZWZhdWx0ID0gaGlnaGxpZ2h0O1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3RoZW1lXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cli-highlight/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cli-highlight/dist/theme.js":
/*!**************************************************!*\
  !*** ./node_modules/cli-highlight/dist/theme.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parse = exports.stringify = exports.toJson = exports.fromJson = exports.DEFAULT_THEME = exports.plain = void 0;\nvar chalk_1 = __importDefault(__webpack_require__(/*! chalk */ \"(ssr)/./node_modules/chalk/source/index.js\"));\n/**\n * Identity function for tokens that should not be styled (returns the input string as-is).\n * See [[Theme]] for an example.\n */\nvar plain = function (codePart) { return codePart; };\nexports.plain = plain;\n/**\n * The default theme. It is possible to override just individual keys.\n */\nexports.DEFAULT_THEME = {\n    /**\n     * keyword in a regular Algol-style language\n     */\n    keyword: chalk_1.default.blue,\n    /**\n     * built-in or library object (constant, class, function)\n     */\n    built_in: chalk_1.default.cyan,\n    /**\n     * user-defined type in a language with first-class syntactically significant types, like\n     * Haskell\n     */\n    type: chalk_1.default.cyan.dim,\n    /**\n     * special identifier for a built-in value (\"true\", \"false\", \"null\")\n     */\n    literal: chalk_1.default.blue,\n    /**\n     * number, including units and modifiers, if any.\n     */\n    number: chalk_1.default.green,\n    /**\n     * literal regular expression\n     */\n    regexp: chalk_1.default.red,\n    /**\n     * literal string, character\n     */\n    string: chalk_1.default.red,\n    /**\n     * parsed section inside a literal string\n     */\n    subst: exports.plain,\n    /**\n     * symbolic constant, interned string, goto label\n     */\n    symbol: exports.plain,\n    /**\n     * class or class-level declaration (interfaces, traits, modules, etc)\n     */\n    class: chalk_1.default.blue,\n    /**\n     * function or method declaration\n     */\n    function: chalk_1.default.yellow,\n    /**\n     * name of a class or a function at the place of declaration\n     */\n    title: exports.plain,\n    /**\n     * block of function arguments (parameters) at the place of declaration\n     */\n    params: exports.plain,\n    /**\n     * comment\n     */\n    comment: chalk_1.default.green,\n    /**\n     * documentation markup within comments\n     */\n    doctag: chalk_1.default.green,\n    /**\n     * flags, modifiers, annotations, processing instructions, preprocessor directive, etc\n     */\n    meta: chalk_1.default.grey,\n    /**\n     * keyword or built-in within meta construct\n     */\n    'meta-keyword': exports.plain,\n    /**\n     * string within meta construct\n     */\n    'meta-string': exports.plain,\n    /**\n     * heading of a section in a config file, heading in text markup\n     */\n    section: exports.plain,\n    /**\n     * XML/HTML tag\n     */\n    tag: chalk_1.default.grey,\n    /**\n     * name of an XML tag, the first word in an s-expression\n     */\n    name: chalk_1.default.blue,\n    /**\n     * s-expression name from the language standard library\n     */\n    'builtin-name': exports.plain,\n    /**\n     * name of an attribute with no language defined semantics (keys in JSON, setting names in\n     * .ini), also sub-attribute within another highlighted object, like XML tag\n     */\n    attr: chalk_1.default.cyan,\n    /**\n     * name of an attribute followed by a structured value part, like CSS properties\n     */\n    attribute: exports.plain,\n    /**\n     * variable in a config or a template file, environment var expansion in a script\n     */\n    variable: exports.plain,\n    /**\n     * list item bullet in text markup\n     */\n    bullet: exports.plain,\n    /**\n     * code block in text markup\n     */\n    code: exports.plain,\n    /**\n     * emphasis in text markup\n     */\n    emphasis: chalk_1.default.italic,\n    /**\n     * strong emphasis in text markup\n     */\n    strong: chalk_1.default.bold,\n    /**\n     * mathematical formula in text markup\n     */\n    formula: exports.plain,\n    /**\n     * hyperlink in text markup\n     */\n    link: chalk_1.default.underline,\n    /**\n     * quotation in text markup\n     */\n    quote: exports.plain,\n    /**\n     * tag selector in CSS\n     */\n    'selector-tag': exports.plain,\n    /**\n     * #id selector in CSS\n     */\n    'selector-id': exports.plain,\n    /**\n     * .class selector in CSS\n     */\n    'selector-class': exports.plain,\n    /**\n     * [attr] selector in CSS\n     */\n    'selector-attr': exports.plain,\n    /**\n     * :pseudo selector in CSS\n     */\n    'selector-pseudo': exports.plain,\n    /**\n     * tag of a template language\n     */\n    'template-tag': exports.plain,\n    /**\n     * variable in a template language\n     */\n    'template-variable': exports.plain,\n    /**\n     * added or changed line in a diff\n     */\n    addition: chalk_1.default.green,\n    /**\n     * deleted line in a diff\n     */\n    deletion: chalk_1.default.red,\n    /**\n     * things not matched by any token\n     */\n    default: exports.plain,\n};\n/**\n * Converts a [[JsonTheme]] with string values to a [[Theme]] with formatter functions. Used by [[parse]].\n */\nfunction fromJson(json) {\n    var theme = {};\n    for (var _i = 0, _a = Object.keys(json); _i < _a.length; _i++) {\n        var key = _a[_i];\n        var style = json[key];\n        if (Array.isArray(style)) {\n            ;\n            theme[key] = style.reduce(function (previous, current) { return (current === 'plain' ? exports.plain : previous[current]); }, chalk_1.default);\n        }\n        else {\n            ;\n            theme[key] = chalk_1.default[style];\n        }\n    }\n    return theme;\n}\nexports.fromJson = fromJson;\n/**\n * Converts a [[Theme]] with formatter functions to a [[JsonTheme]] with string values. Used by [[stringify]].\n */\nfunction toJson(theme) {\n    var jsonTheme = {};\n    for (var _i = 0, _a = Object.keys(jsonTheme); _i < _a.length; _i++) {\n        var key = _a[_i];\n        var style = jsonTheme[key];\n        jsonTheme[key] = style._styles;\n    }\n    return jsonTheme;\n}\nexports.toJson = toJson;\n/**\n * Stringifies a [[Theme]] with formatter functions to a JSON string.\n *\n * ```ts\n * import chalk = require('chalk');\n * import {stringify} from 'cli-highlight';\n * import * as fs from 'fs';\n *\n * const myTheme: Theme = {\n *     keyword: chalk.red.bold,\n *     addition: chalk.green,\n *     deletion: chalk.red.strikethrough,\n *     number: plain\n * }\n * const json = stringify(myTheme);\n * fs.writeFile('mytheme.json', json, (err: any) => {\n *     if (err) throw err;\n *     console.log('Theme saved');\n * });\n * ```\n */\nfunction stringify(theme) {\n    return JSON.stringify(toJson(theme));\n}\nexports.stringify = stringify;\n/**\n * Parses a JSON string into a [[Theme]] with formatter functions.\n *\n * ```ts\n * import * as fs from 'fs';\n * import {parse, highlight} from 'cli-highlight';\n *\n * fs.readFile('mytheme.json', 'utf8', (err: any, json: string)  => {\n *     if (err) throw err;\n *     const code = highlight('SELECT * FROM table', {theme: parse(json)});\n *     console.log(code);\n * });\n * ```\n */\nfunction parse(json) {\n    return fromJson(JSON.parse(json));\n}\nexports.parse = parse;\n//# sourceMappingURL=theme.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cli-highlight/dist/theme.js\n");

/***/ })

};
;